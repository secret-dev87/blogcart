@page "/blogView/{BlogId:int}"
@inject IBlogRepository _blogRepository
@inject NavigationManager _navigationManager
@inject MudBlazor.ISnackbar snackBar


<body class="bg-white text-black dark:text-white dark:bg-black">
@if (IsProcessing)
{
    <div class="text-center">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </div>
}
else
{
    <div class="container bg-white mx-auto flex justify-center pb-10 pt-10">
        <div class="w-full px-1">
            <div class="rounded overflow-hidden shadow-xlg">
                <div class="text-black text-2xl mb-2">
                    <h1>@((MarkupString)Blog.Name)</h1>
                </div>
                <div class="flex justify-center mb-2">
                    <img class="w-full md:w-1/2 lg:w-1/3" src="@Blog.ImageUrl" alt="@Blog.Description">
                </div>
                <div class="">
                    <p class="text-gray-700 text-base">
                        @((MarkupString)Blog.Body)
                    </p>
                </div>
                <div class="px-6 pt-4 pb-2">
                    <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">#photography</span>
                    <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">#travel</span>
                    <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">#winter</span>
                </div>
            </div>
        </div>
    </div>
}
</body>


@code {

    [Parameter]
    public int BlogId { get; set; }

    public BlogDTO Blog { get; set; } = new();
    public bool IsProcessing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        Blog = await _blogRepository.Get(BlogId);
        IsProcessing = false;
    }

}

