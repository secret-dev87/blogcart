@page "/category/Blogcart"

@inject IBlogRepository _blogRepository
@inject NavigationManager _navigationManager
@inject MudBlazor.ISnackbar snackBar

<PageTitle>@CategoryName</PageTitle>
@if (IsProcessing)
{
    <div class="text-center">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </div>
}
else
{
<div class="w-full">
    <_BlogBanner></_BlogBanner>
    <!-- Navi -->
    <ul class="flex justify-center pb-6 pl-6 pr-6">
        @foreach (var category in Blogs.Select(u => u.BlogCategory.Name).Distinct())
        {
            <li>
                <a class="inline-block py-2 px-4 text-center hover:text-indigo-400 font-semibold" href="/category/@category">@category</a>
            </li>
        }
    </ul>
    <!-- Navi -->
    <div class="container max-w-4xl mx-auto md:flex items-start py-8 px-12 md:px-0">
        <!-- articles -->
        <div class="w-full md:pr-12 mb-12">
            @*@foreach (var blog in Blogs.Where(u => u.BlogFavorite == true))*@
            @foreach (var blog in Blogs.Where(u => u.BlogFavorite == true).OrderByDescending(b => b.DateCreated).Take(5))

            {
                <article class="mb-12 border-b">
                    <h2 class="mb-4">
                        <a href="/Page/@blog.Id" class="text-xl md:text-2xl no-underline hover:underline">
                            @((MarkupString)blog.Name)
                        </a>
                    </h2>
                    <div class="mb-4 text-sm">
                        by <a href="#">@((MarkupString)blog.Author)</a> @blog.DateCreated.ToLocalTime().ToString("MM/dd/yyyy")
                        <span class="font-bold mx-1"> | </span>
                        <a href="#">2 Comments</a>
                    </div>
                    <p class="leading-normal mb-4">
                        @((MarkupString)blog.Description)
                    </p>
                </article>
            }
            @*<div class="flex justify-between text-xs">
                    <a href="/UnderConstruction" class="bg-indigo-600 text-white no-underline py-2 px-3 rounded">Previous</a>
                    <a href="/UnderConstruction" class="bg-indigo-600 text-white no-underline py-2 px-3 rounded">Next</a>
                </div>*@
        </div>
        <!--/ articles -->
        <!-- sidebar -->

        <div class="w-full md:w-64">
            <aside class="rounded shadow-lg overflow-hidden mb-6">
                <h3 class="text-sm bg-indigo-600 py-3 px-4">Latest Post</h3>
                <div class="p-2 overflow-y-auto">
                    @foreach (var blog in Blogs.OrderByDescending(u => u.DateCreated).Take(5))
                    {
                        <ul class="list-reset leading-normal">
                            <li class="mb-4">
                                <a href="/Page/@blog.Id" class="text-sm hover:text-indigo-400">
                                    @((MarkupString)blog.Name)
                                    <p class="text-sm">@blog.LastUpdated.ToLocalTime().ToString("MM/dd/yyyy")</p>
                                </a>
                            </li>
                        </ul>
                    }

                </div>
            </aside>

            <aside class="rounded shadow-lg overflow-hidden mb-6">
                <h3 class="text-sm bg-indigo-600 py-3 px-4">Featured</h3>
                <div class="p-2 overflow-y-auto">
                    @*@foreach (var blog in Blogs.Where(u => u.Featured == true))*@
                    @foreach (var blog in Blogs.Where(u => u.Featured == true).OrderByDescending(u => u.LastUpdated).Take(5))
                    {
                        <ul class="list-reset leading-normal">
                            <li class="mb-4">
                                <a href="/Page/@blog.Id" class="text-sm hover:text-indigo-400">
                                    @((MarkupString)blog.Name)
                                </a>
                            </li>

                        </ul>
                    }
                </div>
            </aside>
        </div>
        <!-- /sidebar -->
    </div>
</div>
    <_FooterDarkGray></_FooterDarkGray>
}

@code {

    public bool IsProcessing { get; set; } = false;
    public IEnumerable<BlogDTO> Blogs { get; set; } = new List<BlogDTO>();
    public string CategoryName { get; set; } = "Blogcart";


    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        Blogs = await _blogRepository.GetAll();
        IsProcessing = false;
    }

}