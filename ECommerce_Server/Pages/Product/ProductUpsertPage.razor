@page "/product/create"
@page "/product/edit/{id:int}"

@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject IFileUpload _fileUpload
@inject IDialogService DialogService
@inject NavigationManager _navigationManager
@inject MudBlazor.ISnackbar snackBar
@attribute [Authorize(Roles = SD.Role_Admin)]

<body>
    <div class="min-f-screen w-full p-2 flex justify-center items-center">
        <div class="w-full max-w-lg">
            <div class="bg-white text-black border p-4 shadow rounded w-full mb-20 mt-10">
                <h1 class="mb-8 text-3xl text-white bg-black py-4 ">@Title Product</h1>
                @if (IsLoading)
                {
                    <div class="text-center">
                        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                    </div>
                }
                else
                {
                    <EditForm Model="Product" OnValidSubmit="UpsertProduct">
                        <div class="flex flex-wrap justify-center">
                            <img src="@Product.ImageUrl"
                                 class="p-1 bg-black border rounded max-w-sm" />
                            <div class="form-group bg-gray-200 border shadow md:w-2/3 px-3 mt-2 mb-3 md:mb-0">
                                <div class="form-check">
                                    <InputFile OnChange="HandleImageUpLoad"></InputFile>
                                </div>
                            </div>
                        </div>
                        <DataAnnotationsValidator />
                        <div class="bg-red-100"> <ValidationSummary></ValidationSummary> </div>

                        <div class="form-group text-left text-lrg text-gray-600 mt-4">
                            <MudInputLabel Class="font-bold">Product Name</MudInputLabel>
                            <InputText @bind-Value="Product.Name" class="block w-full text-black focus:shadow-outline rounded-sm border bg-gray-200 py-2 px-3 mt-3"></InputText>
                        </div>
                        <div class="form-group text-left text-lrg text-gray-600 mt-4">
                            <MudInputLabel Class="font-bold">Product color</MudInputLabel>
                            <InputText @bind-Value="Product.Color" class="block w-full text-black focus:shadow-outline rounded-sm border bg-gray-200 py-2 px-3 mt-3"></InputText>
                        </div>
                        <div class="form-group text-left text-lrg text-gray-600 text-bold mt-4">
                            <MudInputLabel Class="font-bold">Product Description</MudInputLabel>
                            <SfRichTextEditor @bind-Value="Product.Description">
                            </SfRichTextEditor>
                        </div>
                        <br />
                        <div class="flex justify-center text-small -mx-3">
                            <div class="form-group bg-gray-200 border shadow md:w-1/3 px-3 mt-2 mb-3  md:mb-0">
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="Product.CustomerFavorites" class="form-check-input bg-black text-white width-full"></InputCheckbox>
                                    <label class="form-check-label font-bold">Customer favorites</label>
                                </div>
                            </div>
                            <div class="form-group border shadow md:w-1/3 px-3 mt-2 mb-3 md:mb-0">
                                <div class="form-select">
                                    <label class="font-bold"><u>Category</u></label>
                                    <InputSelect @bind-Value="Product.CategoryId" class="form-select text-center">
                                        <option value="0" disabled="disabled" selected>--Select Category--</option>
                                        @foreach (var cat in ECommerceCategories)
                                        {
                                            <option value="@cat.Id">@cat.Name</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="form-group border bg-gray-200 shadoww md:w-1/3 px-3 mt-2 mb-3 md:mb-0">
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="Product.ShopFavorites" class="form-check-input"></InputCheckbox>
                                    <label class="form-check-label font-bold">Shop favorites</label>
                                </div>
                            </div>
                        </div>
                        <br />
                        <button href="/product/Create" class="block w-full bg-indigo-600 hover:bg-black text-white rounded font-heading mt-2 py-2 mb-2 ">@Title</button>
                        <MudButton Class="w-full" Href="@($"productprice/edit/{Product.Id}")" Variant="Variant.Filled" Color="Color.Dark">Edit Price</MudButton>
                        <br />
                    </EditForm>
                }
            </div>
        </div>
    </div>
</body>



@code {

    [Parameter]
    public int Id { get; set; }

    private ProductDTO Product { get; set; } = new()
    {
        ImageUrl = "/img/lb_logo.png"
    };
    private IEnumerable<CategoryDTO> ECommerceCategories { get; set; } = new List<CategoryDTO>();
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; }
    public string ErrorMessage = "Bad request";
    public string OldImageUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();
        }
    }

    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        ECommerceCategories = await _categoryRepository.GetAll();
        if (Id != 0)
        {
            Title = "Update";
            Product = await _productRepository.Get(Id);
            OldImageUrl = Product.ImageUrl;
        }
        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertProduct()
    {
        if (Product.Id == 0)
        {
            await _productRepository.Create(Product);
            snackBar.Add("Product created Succesfully. Refresh page to view updated product list", Severity.Success);
        }
        else
        {
            if (OldImageUrl != Product.ImageUrl)
            {
                _fileUpload.DeleteFile(OldImageUrl);
            }
            await _productRepository.Update(Product);
            snackBar.Add("Product updated Succesfully.", Severity.Success);
        }
        _navigationManager.NavigateTo("AdminPanel");
    }

    private async Task HandleImageUpLoad(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".avif" ||
                        fileInfo.Extension.ToLower() == ".jpeg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpg")
                    {
                        Product.ImageUrl = await _fileUpload.UpLoadFile(file);
                    }
                    else
                    {
                        snackBar.Add("Invalid file type! only avif, jpeg, jpg, and png files are valid.", Severity.Error);
                        return;
                    }
                }
            }
            IsLoading = false;
        }
        catch (Exception ex)
        {
            snackBar.Add($"{ex}", Severity.Info);
            snackBar.Add($"Invalid Image", Severity.Warning);
            IsLoading = false;
        }
    }
}

