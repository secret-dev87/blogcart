@page "/login"

<body>
    <div class="min-h-screen w-full p-6 flex justify-center items-center">
        <div class="w-full max-w-xs">
            <div class="bg-white text-black border p-8 shadow rounded w-full mb-6">
                <h1 class="mb-6 text-lg font-bold">Login to your account</h1>
                <EditForm Model="SignInRequest" OnValidSubmit="LoginUser" >
                    <DataAnnotationsValidator />
                    <fieldset class="mb-4">
                        <MudInput @bind-Value="SignInRequest.UserName" id="email" class="form-control mb-2 black-text" name="email" />
                        <MudInputLabel class="block text-sm mb-2">Email address</MudInputLabel>
                    </fieldset>
                    <fieldset class="mb-4">
                        <MudInput @bind-Value="SignInRequest.Password" type="password" id="password" class="form-control mb-2  black-text" />
                        <MudInputLabel class="block text-sm mb-2">Password</MudInputLabel>
                    </fieldset>
                    <div class="pt-1 pb-5 text-sm text-black font-thin">
                        <label><input class="mr-1" type="checkbox" name="remember" id="remember"> Remember me</label>
                    </div>
                    <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto pb-2">Login Now</MudButton>
                    @if (ShowSignInErrors)
                    {
                        <p class="text-center text-danger">@Errors</p>
                    }
                    <ValidationMessage For="(()=>SignInRequest.Password)"></ValidationMessage>
                    <ValidationMessage For="(()=>SignInRequest.UserName)"></ValidationMessage>
                </EditForm>
            </div>
            <p class="text-center text-sm text-white font-thin">Don't have an account yet? <a href="/register" class="text-indigo-500 no-underline hover:underline">Sign up</a></p>
        </div>
    </div>
</body>


@code{

    private SignInRequestDTO SignInRequest = new();
    public bool IsProcessing { get; set; } = false;
    public bool ShowSignInErrors { get; set; }
    public string Errors { get; set; }

    [Inject]
    public IAuthenticationService _authSerivce { get; set; }
    [Inject]
    public NavigationManager _navigationManager { get; set; }
    public string ReturnUrl { get; set; }
    private async Task LoginUser()
    {
        ShowSignInErrors = false;
        IsProcessing = true;
        var result = await _authSerivce.Login(SignInRequest);
        if (result.IsAuthSuccessful)
        {
            //regiration is successful
            //var absoluteUri = new Uri(_navigationManager.Uri);
            //var queryParam = HttpUtility.ParseQueryString(absoluteUri.Query);
            //ReturnUrl = queryParam["returnUrl"];
            if (string.IsNullOrEmpty(ReturnUrl))
            {
                _navigationManager.NavigateTo("/ProductsByFav");
            }
            else
            {
                _navigationManager.NavigateTo("/" + ReturnUrl);
            }
        }
        else
        {
            //failure
            Errors = result.ErrorMessage;
            ShowSignInErrors = true;

        }
        IsProcessing = false;
    }
}