@page "/ServerPreview"
@inject IProductService _productService

<PageTitle>Server Preview</PageTitle>
<div class="max-w-5xl mx-auto pt-20 p-8 flex justify-end">
        <h1 class="font-display-italic font-extrabold text-5xl md:text-6xl italic leading-none mb-6 max-w-xl">Server Preview </h1>
</div>
@if (IsProcessing)
{
    <div class="text-center">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </div>
}
else
{
<body class="font-sans">
    <div>
        <ul class="flex flex-wrap justify-center pb-6 pl-20 pr-20">
            @foreach (var category in ECommerceProducts.Select(u => u.Category.Name).Distinct())
            {
                <li>
                    <a class="inline-block py-2 px-2 text-gray-400 hover:text-indigo-400 font-semibold" href="/@category">@category</a>
                </li>
            }
        </ul>
    </div>
    <div class="container mx-auto flex flex-wrap pb-20">
        @foreach (var product in ECommerceProducts)
        {
            @if (product.Category.Name == CategoryName)
            {
                <div class="w-full md:w-1/2 lg:w-1/3 px-1 mb-12">
                    <MudCard Elevation="25">
                        <MudCardActions>
                            <MudText Typo="Typo.h5" Color="Color.Default">@product.Name</MudText>
                            <MudSpacer />
                            <MudText Color="Color.Primary">@product.ECommerceProductPrices.OrderBy(u => u.Price).FirstOrDefault()?.Price.ToString("c")</MudText>
                        </MudCardActions>
                        <img src="@product.ImageUrl" class="w-full h-64 object-cover" />
                        <MudCardContent>
                            <p class="h-48 min-h-0">
                                <MudText Typo="Typo.body1" Color="Color.Inherit"> @((MarkupString)product.Description)</MudText>
                            </p>
                        </MudCardContent>
                        <MudCardActions>
                            @if (product.Color != "*")
                            {
                                <MudText Class="h-40" Typo="Typo.body2" Color="Color.Default"> Color:@product.Color</MudText>
                            }
                            <MudSpacer />
                            <MudText Class="h-40" Typo="Typo.body2" Color="Color.Default"> Cat:@product.Category.Name</MudText>
                        </MudCardActions>
                    </MudCard>
                </div>

            }
        }
    </div>
    <_FooterDarkGray></_FooterDarkGray>
</body>
}

@code {
    public bool IsProcessing { get; set; } = false;
    public IEnumerable<ProductDTO> ECommerceProducts { get; set; } = new List<ProductDTO>();
    public string CategoryName { get; set; } = "ServerPreview";

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        ECommerceProducts = await _productService.GetAll();
        IsProcessing = false;
    }
}

