@page "/ProductsByFav"
@inject IProductService _productService
@*Products UI place holder
    <_Products></_Products>*@


<_ProductsHeader></_ProductsHeader>
@if (IsProcessing)
{
    <PageTitle>Loading</PageTitle>
    <div class="text-center">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </div>
}
else
{
    <PageTitle>Favorite Products</PageTitle>
    <body class="font-sans">


        <div class="container mx-auto flex flex-wrap pb-20">

            @foreach (var category in ECommerceProducts.Select(u => u.Category.Name).Distinct())
            {
                <div class="w-full md:w-1/2 lg:w-1/3 px-6 mb-12">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">@category</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCarousel Class="mud-width-full" Style="height:250px;" ShowArrows="@arrows" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" ShowBullets="@bullets" TData="object">
                            @foreach (var product in ECommerceProducts.Where(u => u.Category.Name == category))
                            {
                                <MudCarouselItem Transition="transition" Color="@Color.Dark">
                                    <a href="@product.ImageUrl">
                                        <img src="@product.ImageUrl" class="w-full h-64 object-cover mb-6" />
                                    </a>
                                </MudCarouselItem>
                            }
                            @*<MudCardContent>
                                <MudText Typo="Typo.h3">@product.Name</MudText>
                                <MudText Typo="Typo.body2">@((MarkupString)product.Description)</MudText>
                            </MudCardContent>*@
                        </MudCarousel>
                        <MudCardActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
                            <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" />
                        </MudCardActions>
                    </MudCard>
                </div>
            }
        </div>

        <_FooterDarkGray></_FooterDarkGray>
    </body>
}


@code {
    public bool IsProcessing { get; set; } = false;
    public IEnumerable<ProductDTO> ECommerceProducts { get; set; } = new List<ProductDTO>();

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        ECommerceProducts = await _productService.GetAll();
        IsProcessing = false;
    }

    private bool arrows = true;
    private bool bullets = false;
    private bool enableSwipeGesture = true;
    private bool autocycle = false;
    private Transition transition = Transition.Slide;
}

