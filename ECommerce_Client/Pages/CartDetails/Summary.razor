@page "/summary"
@inject MudBlazor.ISnackbar snackBar
@inject ILocalStorageService _localStorage
@inject IProductService _productService
@*@inject IPaymentService _paymentService*@
@inject IOrderService _orderService
@*@using Microsoft.AspNetCore.Authorization*@
@*@attribute [Authorize]*@


@if (IsProcessing)
    {
    <PageTitle>Loading</PageTitle>
    <div class="text-center">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </div>
    }
    else
    {
    <div class="min-f-screen w-full p-2 pt-10 flex justify-center">
        <div class="w-full md:w-1/2 lg:w-1/3">

            @* Products in Cart view*@
            <MudCard Class="w-full m-3 p-6">
                <MudText Typo="Typo.h3" Style="text-align:left">Order Summary</MudText>
                <table class="w-full justify-center">
                    <thead class="w-full">
                        <tr>
                            <th class="w-1/2 px-8 py-4 "></th>
                            <th class="w-full px-8 py-4 ">Name</th>
                            <th class="w-1/2 px-8 py-4">Qty</th>
                            <th class="w-1/2 px-8 py-4">Price</th>

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var prod in Order.OrderDetails)
                        {
                            <tr class="w-full">
                                <td class="border ">
                                    <img src="@prod.Product.ImageUrl" width="100" height="100">
                                </td>
                                <td class="border">
                                    <p class="w-full text-xlg"> @prod.ProductName</p>
                                </td>
                                <td class="border ">@prod.Count</td>
                                <td class="border ">@prod.Price</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </MudCard>

            @* Address form *@
            <EditForm Model="@Order.OrderHeader" OnValidSubmit="HandleCheckout">
                <DataAnnotationsValidator />
                <MudCard Style="border-block; border-white;">
                    <MudCardContent>
                        <MudTextField Label="Name" HelperText="Max. 20 characters"
                                      @bind-Value="Order.OrderHeader.Name" For="@(() => Order.OrderHeader.Name)" />
                        <MudTextField Label="PhoneNumber" Class="mt-3"
                                      @bind-Value="Order.OrderHeader.PhoneNumber" For="@(() => Order.OrderHeader.PhoneNumber)" />
                        <MudTextField Label="Email" Class="mt-3"
                                      @bind-Value="Order.OrderHeader.Email" For="@(() => Order.OrderHeader.Email)" />
                        <MudTextField Label="StreetAddress" Class="mt-3"
                                      @bind-Value="Order.OrderHeader.StreetAddress" For="@(() => Order.OrderHeader.StreetAddress)" />
                        <MudTextField Label="City" Class="mt-3"
                                      @bind-Value="Order.OrderHeader.City" For="@(() => Order.OrderHeader.City)" />
                        <MudTextField Label="State" Class="mt-3"
                                      @bind-Value="Order.OrderHeader.State" For="@(() => Order.OrderHeader.State)" />
                        <MudTextField Label="PostalCode" Class="mt-3"
                                      @bind-Value="Order.OrderHeader.PostalCode" For="@(() => Order.OrderHeader.PostalCode)" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Checkout Now</MudButton>
                        <MudButton Href="/Cart" FullWidth="true" Variant="Variant.Filled" Color="Color.Dark" Class="ml-auto">Return to Cart</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </div>
    </div>

    }


     

    @code {
        public bool IsProcessing { get; set; } = false;
        private OrderDTO Order { get; set; } = null;
        private IEnumerable<ProductDTO> Products { get; set; }

        protected override async Task OnInitializedAsync()
        {
            IsProcessing = true;
            List<ShoppingCart> cart = await _localStorage.GetItemAsync<List<ShoppingCart>>(SD.ShoppingCart);
            Products = await _productService.GetAll();
            Order = new()
            {
                OrderHeader = new()
                {
                    OrderTotal = 0,
                    Status = SD.Status_Pending
                },
                OrderDetails = new List<OrderDetailDTO>()
            };

            foreach (var item in cart)
            {
                ProductDTO product = Products.FirstOrDefault(u => u.Id == item.ProductId);
                ProductPriceDTO productPrice = product.ECommerceProductPrices.FirstOrDefault(u => u.Id == item.ProductPriceId);

                OrderDetailDTO orderDetailDTO = new()
                {
                    ProductId = item.ProductId,
                    Size = productPrice.Size,
                    Count = item.Count,
                    Price = productPrice.Price,
                    ProductName = product.Name,
                    Product = product
                };
                Order.OrderDetails.Add(orderDetailDTO);
                Order.OrderHeader.OrderTotal += (item.Count * productPrice.Price);
            }

            //if (await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails) != null)
            //{
            //    var userInfo = await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails);
            //    Order.OrderHeader.UserId = userInfo.Id;
            //    Order.OrderHeader.Name = userInfo.Name;
            //    Order.OrderHeader.Email = userInfo.Email;
            //    Order.OrderHeader.PhoneNumber = userInfo.PhoneNumber;

            //}

            IsProcessing = false;
        }


        private async Task HandleCheckout()
        {
            //try
            //{
            //    IsProcessing = true;
            //    var paymentDto = new StripePaymentDTO()
            //    {
            //        Order = Order
            //    };

            //    var result = await _paymentService.Checkout(paymentDto);

            //    var StripeSessionAndPI = result.Data.ToString().Split(';');

            //    Order.OrderHeader.SessionId = StripeSessionAndPI[0];
            //    Order.OrderHeader.PaymentIntentId = StripeSessionAndPI[1];

            //    var orderDTOSaved = await _orderService.Create(paymentDto);

            //    await _localStorage.SetItemAsync(SD.Local_OrderDetails, orderDTOSaved);

            //    await _jsRuntime.InvokeVoidAsync("redirectToCheckout", StripeSessionAndPI[0]);
            //}
            //catch (Exception e)
            //{
            //    await _jsRuntime.ToastrError(e.Message);
            //}
        }
    }


